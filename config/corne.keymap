/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "../zmk-nodefree-config/helper.h"
#define QUICK_TAP_MS 175

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    global-quick-tap-ms = <150>;         // requires PR #1387
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)
/* Nav cluster */

// long-tap action on hold, short-tap action on all interrupts
&mt { 
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L  |  Y  |  U  |  ;  | GUI  |
            // | ESC  |  A  |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  |  '   |
            // | SHFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H  |  ,  |  .  |  /  | SHFT |
            //                    | LWR | BKSP| CTRL|   | ENT | SPC | RSE |

            bindings = <
&mt LG(LANGUAGE_6) TAB  &mt LG(NUMBER_5) Q  &mt LG(NUMBER_4) W  &mt LG(NUMBER_3) F  &mt LG(NUMBER_2) P  &mt LG(NUMBER_1) B    &mt LG(NUMBER_6) J   &kp L              &kp U        &kp Y            &kp SEMI         &kp LGUI
&kp CAPS ESC           &hml LEFT_GUI A      &hml LEFT_ALT R      &hml LCTRL S         &hml LSHIFT T        &hml TAB G             &hmr TAB M            &hmr RIGHT_SHIFT N  &hmr RCTRL E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O  &kp SQT
&kp LSHFT               &kp Z               &mt LC(X) X         &mt LC(C) C         &kp D               &mt LC(LS(V)) V       &mt K_APPLICATION K  &kp H              &kp COMMA    &kp DOT          &kp FSLH         &kp RSHFT
                                                                &lt 3 HOME          &lt 2 BACKSPACE     &lt 1 DELETE          &lt 1 ENTER          &lt 2 SPACE        &lt 3 END
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  GUI |
            // | HOME | BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |  END |
            // | SHFT |BTCLR|     |     |     |     |   |     |     |     |     |     |      |
            //                    | ALT | DEL | BKSP|   | ENT | SPC | RALT |

            bindings = <
&kp KP_NUMLOCK  &kp F1          &kp F2            &kp F3      &kp F4   &kp F5     &kp LG(LS(LEFT_ARROW))  &kp LG(LC(LEFT_ARROW))  &kp LG(LC(RIGHT_ARROW))  &kp LG(LS(RIGHT_ARROW))  &trans  &trans
&trans          &kp F10         &kp F9            &kp F8      &kp F7   &kp F6     &kp LEFT                &kp DOWN                &kp UP                   &kp RIGHT                &trans  &trans
&trans          &kp K_PREVIOUS  &kp K_PLAY_PAUSE  &kp K_NEXT  &kp F12  &kp F11    &kp LG(LEFT_ARROW)      &kp LG(DOWN_ARROW)      &kp LG(UP_ARROW)         &kp LG(RIGHT_ARROW)      &trans  &trans
                                                  &trans      &trans   &trans     &trans                  &trans                  &trans
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  GUI |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI | DEL | BKSP|   | ENT | SPC | ALT |

            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4   &kp NUMBER_5    &kp NUMBER_6  &kp N7                &kp NUMBER_8           &kp NUMBER_9      &kp NUMBER_0       &trans
&trans  &kp EXCL      &kp AT_SIGN   &kp HASH      &kp DOLLAR     &kp PRCNT       &kp EQUAL     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE
&trans  &kp GRAVE     &kp TILDE     &kp ASTRK     &kp AMPERSAND  &kp CARET       &kp PLUS      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS         &kp UNDER          &kp BACKSLASH
                                    &trans        &kp DEL        &kp DEL         &kp RET       &kp SPACE             &trans
            >;
        };

        bt_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &bt BT_NXT      &trans  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &bt BT_PRV      &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
