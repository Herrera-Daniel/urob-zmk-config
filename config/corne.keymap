/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "../zmk-nodefree-config/helper.h"
#define QUICK_TAP_MS 175
#define TAPPING_TERM_MS 175
#define REQUIRE_PRIOR_IDLE_MS 185

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;         
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>; 
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             
)

/* left-hand HRMs */
ZMK_BEHAVIOR(hltl, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>; 
    bindings = <&mo>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hltr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>; 
    bindings = <&mo>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             
)

// long-tap action on hold, short-tap action on all interrupts
&mt { 
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;
};

/ {
     keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q      |  W      |  F       |  P       |  B      |   |  J      |  L       |  Y       |  U      |  ;      |      |
            // | ESC  |  A/GUI  |  R/ALT  |  S/CTRL  |  T/SHFT  |  G      |   |  M      |  N/SHFT  |  E/CTRL  |  I/ALF  |  O/GUI  |  '   |
            // | SHFT |  Z      |  X      |  C       |  D       |  V      |   |  K      |  H       |  ,       |  .      |  /      | SHFT |
            //                                 | HOME/5 | BKSPC/3 | DEL/1 |   | ENT/1 | SPC/2 | END/5 |

            bindings = <
&kp TAB   &kp Q           &kp W           &kp F        &kp P         &kp B               &kp J         &kp L              &kp U        &kp Y            &kp SEMI         &trans
&kp ESC   &hml LEFT_GUI A &hml LEFT_ALT R &hml LCTRL S &hml LSHIFT T &kp G               &kp M         &hmr RIGHT_SHIFT N &hmr RCTRL E &hmr RIGHT_ALT I &hmr LEFT_GUI O  &kp SQT
&kp LSHFT &kp Z           &kp X           &kp C        &kp D         &kp V               &kp K         &kp H              &kp COMMA    &kp DOT          &kp FSLH         &kp RSHFT
                                &lt 4 HOME       &lt 3 BACKSPACE     &lt 2 DELETE        &lt 1 ENTER   &lt 2 SPACE        &lt 4 END
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |        |     |       |  EVAL     |  RENAME    | CTRL    |   | RESZE_WIN | LEFT_WRKSPC | LEFT_WRKSPC | RESZE_WIN |            |      |
            // |        |     | INS   | GUI(LEFT) | GUI(RIGHT) | SHIFT   |   | LFT       | DWN         |  UP         | RGT       |  GUI(ENT)  |      |
            // |        |     |       | GUI(UP)   | GUI(DOWN)  | LA(INS) |   | WNDWLFT   | WRKSPCLTF   | WRKSPCRHT   | WNDWRHT   |            |      |
            //                                 |     |     |     |         |   |     |     |

            bindings = <
&trans  &trans     &trans         &kp LA(F8)         &kp LS(F6)          &kp LCTRL         &kp LS(RIGHT_ARROW)    &kp LG(HOME)           &kp LG(END)             &kp LS(LEFT_ARROW)      &trans         &trans
&trans  &trans     &kp INSERT     &kp LG(LEFT_ARROW) &kp LG(RIGHT_ARROW) &kp LSHIFT        &kp LEFT               &kp DOWN               &kp UP                  &kp RIGHT               &kp LG(ENTER)  &trans
&trans  &trans     &trans         &kp LG(UP_ARROW)   &kp LG(DOWN_ARROW)  &kp LA(INSERT)    &kp LG(LS(LEFT_ARROW)) &kp LG(LC(LEFT_ARROW)) &kp LG(LC(RIGHT_ARROW)) &kp LG(LS(RIGHT_ARROW)) &trans         &trans
                                                  &trans      &trans   &trans              &trans    &trans       &trans
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // | CAPS |     |  _  | '|' |  `  |  ~  |   |  <  |  (  |  )  |  >  |     |     |
            // |      |  !  |  @  |  #  |  $  |  %  |   |  =  |  {  |  }  |  :  |  ;  |     |
            // |      |     |     |  *  |  &  |  ^  |   |  +  |  [  |  ]  |  -  |     |     |
            //                    |     | BKSP | DEL|   | ENT | SPC |     |

            bindings = <
&kp CAPS &trans        &kp UNDER     &kp PIPE      &kp GRAVE      &kp TILDE       &kp LT       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GT     &trans   &trans
&trans   &kp EXCL      &kp AT_SIGN   &kp HASH      &kp DOLLAR     &kp PRCNT       &kp EQUAL    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp COLON  &kp SEMI &trans
&trans   &trans        &trans        &kp ASTRK     &kp AMPERSAND  &kp CARET       &kp PLUS     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp MINUS  &trans   &trans
                                    &trans        &kp BACKSPACE  &kp DEL         &kp RET       &kp SPACE             &trans
            >;
        };

number_layer {
            // -----------------------------------------------------------------------------------------
            // |      |  F1 |  F2 |  F3 | F4  | F5  |       | NEXT    |  7  |  8  |  9  |        |     |
            // |      | F10 |  F9 |  F8 | F7  | F6  |       | PLY/PSE |  4  |  5  |  6  | VDWN   |     |
            // |      |     |     |     | F12 | F11 |       | PREV    |  1  |  2  |  3  |  VUP   |     |
            //                    |     |     |     |       | BKSP    |  0  |     |

            bindings = <
&trans      &kp F1        &kp F2        &kp F3      &kp F4    &kp F5           &kp C_NEXT  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
&trans      &kp F10       &kp F9        &kp F8      &kp F7    &kp F6           &kp C_PLAY_PAUSE  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp C_VOLUME_UP  &trans
&tog 4      &trans        &trans        &trans      &kp F12   &kp F11          &kp C_PREV  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp C_VOLUME_DOWN  &trans
                                    &trans        &trans        &trans         &trans   &kp NUMBER_0  &trans
            >;
        };

gaming_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC  |  T |  Q |  W | E  | R  |       | J |  L  |  U  |  Y  |    |  TOG_LYR   |
            // |  TAB  |  G |  A |  S | D  | F  |       | M |  N  |  P  |  I  | O  |     |
            // |  SHFT |  Z |  X |  V | C  | B  |       | K |  H  |  ,  |  .  | /  |     |
            //       |  ALT  |  SHFT  |  SPC  |       | ESC |    |     |

            bindings = <
&kp ESC      &kp T   &kp Q   &kp W  &kp E   &kp R          &kp J  &kp L  &kp U      &kp Y    &trans   &tog 4
&kp TAB      &kp G   &kp A   &kp S  &kp D   &kp F          &kp M  &kp N  &kp P      &kp I    &kp O    &trans
&kp LSHIFT   &kp Z   &kp X   &kp V  &kp C   &kp B          &kp K  &kp H  &kp COMMA  &kp DOT  &kp FSLH &trans
              &mt LALT LCTRL   &kp LSHIFT    &kp SPACE         &mo 3   &trans  &trans
            >;
        };

        bt_layer {
            bindings = <
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans           &trans  &trans        &trans        &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans           &trans  &trans        &trans        &trans  &trans  &trans
&trans      &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0     &trans  &trans        &trans        &trans  &trans  &trans
                                    &trans        &trans        &trans           &trans  &trans  &trans
            >;
        };
    };
};
