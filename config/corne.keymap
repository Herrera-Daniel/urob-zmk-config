/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "../zmk-nodefree-config/helper.h"
#define LT_TAPPING_TERM_MS 180
#define QUICK_TAP_MS 175
#define TAPPING_TERM_MS 180
#define REQUIRE_PRIOR_IDLE_MS 150

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <LT_TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS_L LH2 LH1 LH0 
#define THUMBS_R RH0 RH1 RH2

#include "combos.dtsi"

ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMI>;
)

ZMK_BEHAVIOR(dot_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DOT>, <&kp COLON>;
)

ZMK_BEHAVIOR(par_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LPAR>, <&kp RPAR>;
)

ZMK_BEHAVIOR(brace_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LBRC>, <&kp RBRC>;
)

ZMK_BEHAVIOR(bracket_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LBKT>, <&kp RBKT>;
)

ZMK_BEHAVIOR(gt_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LT>, <&kp GT>;
)

ZMK_BEHAVIOR(minus_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp MINUS>, <&kp PLUS>;
)

ZMK_BEHAVIOR(equal_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp EQUAL>, <&kp GT>;
)

ZMK_BEHAVIOR(up_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp UP>, <&kp DOWN>;
)

ZMK_BEHAVIOR(left_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp LEFT>, <&kp RIGHT>;
)

ZMK_BEHAVIOR(del_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp DEL>, <&kp TAB>;
)

ZMK_BEHAVIOR(home_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp HOME>, <&kp END>;
)
ZMK_BEHAVIOR(enter_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp ENTER>, <&kp LC(ENTER)>;
)

ZMK_BEHAVIOR(slash_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp FSLH>, <&kp BSLH>;
)

ZMK_BEHAVIOR(ques_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp QMARK>, <&kp EXCL>;
)
/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                 
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;         
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS_R>;
    hold-trigger-on-release;             
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>; 
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;             
)

ZMK_BEHAVIOR(comma_mod, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>; 
    bindings = <&kp>, <&comma_morph>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;             
)

ZMK_BEHAVIOR(dot_mod, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>; 
    bindings = <&kp>, <&dot_morph>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;             
)

ZMK_BEHAVIOR(del_mod, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    bindings = <&mo>, <&del_morph>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;             
)

ZMK_BEHAVIOR(home_mod, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>; 
    bindings = <&mo>, <&home_morph>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;             
)

ZMK_BEHAVIOR(enter_mod, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    bindings = <&mo>, <&enter_morph>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;             
)

ZMK_BEHAVIOR(ques_mod, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                
    bindings = <&kp>, <&ques_morph>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;             
)

ZMK_BEHAVIOR(resize_window_left, macro,
wait-ms = <100>;
    bindings = <&macro_tap &kp LG(ENTER)>
             , <&macro_tap &kp LS(LEFT)>
             , <&macro_tap &kp ENTER>;
)

ZMK_BEHAVIOR(resize_window_right, macro,
wait-ms = <100>;
   bindings = <&macro_tap &kp LG(ENTER)>
             , <&macro_tap &kp LS(RIGHT)>
             , <&macro_tap &kp ENTER>;
)

ZMK_BEHAVIOR(move_window_left, macro,
wait-ms = <100>;
    bindings = <&macro_tap &kp LG(ENTER)>
             , <&macro_tap &kp LEFT>
             , <&macro_tap &kp ENTER>;
)

ZMK_BEHAVIOR(move_window_right, macro,
   wait-ms = <100>;
   bindings = <&macro_tap &kp LG(ENTER)>
             , <&macro_tap &kp RIGHT>
             , <&macro_tap &kp ENTER>;
)

ZMK_BEHAVIOR(win_sleep, macro,
    wait-ms = <200>;
    tap-ms = <50>;
    bindings = <&kp LG(X) &kp U &kp S>;
)

&mt { 
    flavor = "tap-preferred"; 
    tapping-term-ms = <200>; 
    quick-tap-ms = <175>; 
};


/ {
     keymap {
        compatible = "zmk,keymap";

         default_layer {
            // -----------------------------------------------------------------------------------------
            // | GUI  |  Q   |  W  |  F  |  P  |  B  |   |  J  |  L  |  Y  |  U  |  -/+  |  =/> |
            // | ESC  |  A   |  R  |  S  |  T  |  G  |   |  M  |  N  |  E  |  I  |  O  |  '   |
            // | CTRL |  Z   |  X  |  C  |  D  |  V  |   |  K  |  H  |  ,/CTRL   |  ./ALT   |  '/'/GUI  | SHFT |
            //       | HOME/4 | BCKSPC/SHIFT | DEL/TAB/3 |   | ENTER/LC(ENTER)/1 | SPC/SHIFT | END/4 |

            bindings = <
            &kp LGUI   &kp Q &kp W &kp F &kp P &kp B        &kp J  &kp L &kp U     &kp Y   &minus_morph  &equal_morph
            &kp ESC   &kp A &kp R &kp S &kp T &kp G        &kp M  &kp N &kp E     &kp I   &kp O     &kp SQT
            &kp LCTRL &kp Z &kp X &kp C &kp D &kp V        &kp K  &kp H &comma_mod LCTRL 0 &dot_mod LALT 0 &ques_mod LGUI 0  &kp RSHFT
        &lt 3 HOME   &mt LSHIFT BACKSPACE  &del_mod 2 0        &enter_mod 1 0  &mt LSHIFT SPACE   &lt 3 END
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |        |     |       |  EVAL     |  RENAME    | LA(INS) |   | RESZE_WIN | UP_WRKSPC | DOWN_WRKSPC | RESZE_WIN |            |      |
            // |        |     | INS   | GUI(LEFT) | GUI(RIGHT) | COPY    |   | LFT       | DWN         |  UP         | RGT       |  GUI(ENT)  |      |
            // |        |     |       | GUI(UP)   | GUI(DOWN)  | PASTE   |   | WNDWLFT   | WRKSPCLTF   | WRKSPCRHT   | WNDWRHT   |            |      |
            //                                 |     |     |     |         |   |     |     |

            bindings = <
&trans  &trans       &kp INS         &kp LG(UP_ARROW)   &kp LG(DOWN_ARROW)   &kp LA(INSERT)         &resize_window_left    &kp LA(DOWN)     &kp LA(UP)             &resize_window_right      &kp PG_UP         &trans
&trans  &kp LG(HOME) &kp LA(F8)     &kp LG(LEFT_ARROW) &kp LG(RIGHT_ARROW) &kp LC(C)        &kp LEFT               &kp DOWN               &kp UP                  &kp RIGHT               &kp LG(ENTER)  &trans
&trans  &kp LG(END)  &kp LS(F6)     &move_window_left   &move_window_right  &kp LC(V)    &kp LC(LEFT_ARROW) &kp LG(LC(LEFT_ARROW)) &kp LG(LC(RIGHT_ARROW)) &kp LC(RIGHT_ARROW) &kp PG_DN         &trans
                                                  &trans      &trans   &trans              &trans    &trans       &trans
            >;
        };

number_layer {
            // -----------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3 | F4  | F5  |       | *  |  7  |  8  |  9  | /  |  |
            // |       | F10 |  F9 |  F8 | F7  | F6  |       | =  |  4  |  5  |  6  | -  |  |
            // | TOG_5 |     |     |     | F12 | F11 |       | +  |  1  |  2  |  3  | #  |  |
            //                    |     |     |     |       | BKSP    |  0  |     |

            bindings = <
&trans      &kp F1        &kp F2        &kp F3      &kp F4    &kp F5           &kp ASTRK  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp FSLH  &trans
&trans      &kp F10       &kp F9        &kp F8      &kp F7    &kp LC(C)           &kp EQUAL  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS  &trans
&tog 4      &trans        &trans        &kp F12     &kp F11   &kp LC(V)          &kp PLUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp HASH  &trans
                                    &trans        &trans        &trans         &kp BACKSPACE   &kp NUMBER_0  &trans
            >;
        };

stuff_layer {
            // -----------------------------------------------------------------------------------------
            // |  TOG_6  |   |   |   |  |          |       |      |    |    |    |   |  |
            // |         |   |   |   |  | BRI_INC  |       |      |  PREV  |  PLY/PSE  | NEXT  |   |   |
            // |         |   |   |   |  | BRI_DEC  |       | MUTE |  VUP   |  VDWN     |   |   |   |
            //                    |     |     |     |       |     |    |     |

            bindings = <
&tog 5      &trans   &trans   &trans  &trans   &trans       &trans  &trans   &trans  &trans  &trans  &win_sleep
&trans      &trans   &trans   &trans  &trans  &kp C_BRI_INC          &trans  &kp C_PREV  &kp C_PLAY_PAUSE   &kp C_NEXT    &trans    &trans
&trans   &trans   &trans   &trans  &trans  &kp C_BRI_DEC         &kp C_MUTE  &kp C_VOLUME_UP  &kp C_VOLUME_DOWN  &trans  &trans &trans
              &trans   &trans   &trans         &trans   &trans  &trans
            >;
        };

gaming_layer {
            // -----------------------------------------------------------------------------------------
            // |  ESC  |  T |  Q |  W | E  | R  |       | J |  L  |  U  |  Y  |    |  TOG_4   |
            // |  TAB  |  G |  A |  S | D  | F  |       | M |  N  |  P  |  I  | O  |     |
            // |  SHFT |  Z |  X |  V | C  | B  |       | K |  H  |  ,  |  .  | /  |     |
            //       |  ALT  |  SHFT  |  SPC  |       | ESC |    |     |

            bindings = <
&kp ESC     &kp T   &kp Q   &kp W  &kp E   &kp R          &kp J  &kp L  &kp U      &kp Y    &trans   &tog 5
&kp TAB     &kp G   &kp A   &kp S  &kp D   &kp F          &kp M  &kp N  &kp P      &kp I    &kp O    &trans
&kp LCTRL   &kp Z   &kp X   &kp V  &kp C   &kp B          &kp K  &kp H  &kp COMMA  &kp DOT  &kp FSLH &trans
              &kp LALT   &kp LSHIFT    &kp SPACE         &mo 3   &trans  &trans
            >;
        };

        bt_layer {
            bindings = <
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans           &trans  &trans        &trans        &trans  &trans  &tog 6
&trans      &trans        &trans        &trans        &trans        &trans           &trans  &trans        &trans        &trans  &trans  &trans
&trans      &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0     &trans  &trans        &trans        &trans  &trans  &trans
                                    &trans        &trans        &trans           &trans  &trans  &trans
            >;
        };
    };
};
